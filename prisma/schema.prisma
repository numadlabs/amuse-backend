// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(dbgenerated("gen_random_uuid()"))
  email                 String?   @unique
  emailVerificationCode String?
  isEmailVerified       Boolean   @default(false)
  emailVerifiedAt       DateTime?
  password              String
  nickname              String
  firstName             String?
  lastName              String?
  role                  ROLES     @default(USER)
  prefix                String
  telNumber             String
  telVerificationCode   String?
  isTelVerified         Boolean   @default(false)
  profilePicture        String?
  dateOfBirth           DateTime?
  location              String?
  createdAt             DateTime  @default(now())

  UserCard     UserCard[]
  UserBonus    UserBonus[]
  Notification Notification[]
  Tap          Tap[]
}

enum ROLES {
  ADMIN
  USER
}

enum CATEGORY {
  JAPANESE
  KOREAN
  MEDITERRANEAN
  BUFFET
  FAST_FOOD
  MONGOLIAN
}

model Restaurant {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  category    CATEGORY
  description String
  location    String
  latitude    Float
  longitude   Float
  opensAt     String
  closesAt    String

  membershipCardId String? @unique
  Card             Card?   @relation(fields: [membershipCardId], references: [id])
  // Cards Card[] @relation("restaurantCard")
}

model Card {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  mintedAt    DateTime
  createdAt   DateTime?
  expiryInfo  String
  artistInfo  String
  nftImageUrl String
  instruction String
  benefits    String

  // tier          TIER
  // totalSupply   Int
  // currentSupply Int

  Restaurant Restaurant?
  UserCard   UserCard[]
}

enum TIER {
  BRONZE
  SILVER
  GOLD
}

model UserCard {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  visitCount Int
  mintedAt   DateTime?
  ownedAt    DateTime
  cardId     String
  Card       Card      @relation(fields: [cardId], references: [id])
  userId     String
  User       User      @relation(fields: [userId], references: [id])
  Tap        Tap[]
}

model Tap {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  tappedAt   DateTime
  userId     String
  User       User     @relation(fields: [userId], references: [id])
  userCardId String
  UserCard   UserCard @relation(fields: [userCardId], references: [id])
}

model Bonus {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  imageUrl String
  name     String
  // price         Intx
  // currency      String
  // totalSupply   Int
  // currentSupply Int

  UserBonus UserBonus[]
}

model UserBonus {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  userId  String
  User    User    @relation(fields: [userId], references: [id])
  bonusId String
  Bonus   Bonus   @relation(fields: [bonusId], references: [id])
  isUsed  Boolean
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  userId  String
  User    User    @relation(fields: [userId], references: [id])
  message String
  type    String
  isRead  Boolean
}
