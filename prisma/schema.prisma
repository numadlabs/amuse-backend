// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  password       String
  nickname       String
  role           ROLES     @default(USER)
  profilePicture String?
  dateOfBirth    DateTime?
  location       String?
  createdAt      DateTime  @default(now())
  balance        Float     @default(0)
  visitCount     Int       @default(0)

  email                 String?   @unique
  emailVerificationCode String?
  isEmailVerified       Boolean   @default(false)
  emailVerifiedAt       DateTime?

  prefix              String
  telNumber           String
  telVerificationCode String?
  isTelVerified       Boolean   @default(false)
  telVerifiedAt       DateTime?

  userTierId String
  Tier       UserTier @relation(references: [id], fields: [userTierId])

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  UserCard     UserCard[]
  UserBonus    UserBonus[]
  Notification Notification[]
  Tap          Tap[]          @relation("user")
  ScannedTaps  Tap[]          @relation("waiter")
}

model UserTier {
  id               String @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  requiredNo       Int
  rewardMultiplier Float

  nextTierId String?
  nextTier   UserTier? @relation("tierHierarchy", references: [id], fields: [nextTierId])

  precedingTiers UserTier[] @relation("tierHierarchy")
  User           User[]
}

model Device {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  pushToken String
  createdAt DateTime @default(now())
}

enum ROLES {
  SUPER_ADMIN
  RESTAURANT_OWNER
  RESTAURANT_WAITER
  USER
}

enum CATEGORY {
  JAPANESE
  KOREAN
  MEDITERRANEAN
  BUFFET
  FAST_FOOD
  MONGOLIAN
  PAN_ASIAN
  CAFE
  LEBANESE
  BEACH_CLUB
  CHINESE
  GEORGIAN
  CUBAN
  MEXICAN
}

model Restaurant {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime @default(now())
  name          String
  category      CATEGORY
  description   String
  location      String
  latitude      Float
  longitude     Float
  logo          String?
  balance       Float    @default(0)
  rewardAmount  Float
  perkOccurence Int

  Card      Card[]
  User      User[]
  Timetable Timetable[]
}

model Timetable {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  dayNoOfTheWeek Int
  opensAt        String
  closesAt       String
  isOffDay       Boolean  @default(false)
  createdAt      DateTime @default(now())

  restaurantId String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Card {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  nftImageUrl String?
  instruction String
  benefits    String

  // tier          TIER
  // totalSupply   Int
  // currentSupply Int

  // mintedAt    DateTime?
  // expiryInfo  String?
  // artistInfo  String?

  restaurantId String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  Bonus    Bonus[]
  UserCard UserCard[]
}

model UserCard {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  visitCount Int      @default(0)
  ownedAt    DateTime @default(now())

  cardId String
  Card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  userId     String
  User       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFirstTap Boolean @default(false)

  Tap       Tap[]
  UserBonus UserBonus[]
}

model Tap {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  amount   Float
  tappedAt DateTime @default(now())

  waiterId String
  Waiter   User   @relation("waiter", fields: [waiterId], references: [id])

  userId String
  User   User   @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  userCardId String
  UserCard   UserCard @relation(fields: [userCardId], references: [id], onDelete: Cascade)
}

model Bonus {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  imageUrl      String?
  name          String
  price         Float   @default(0.00010000)
  totalSupply   Int
  currentSupply Int

  cardId String?

  Card      Card?       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  UserBonus UserBonus[]
}

model UserBonus {
  id     String  @id @default(dbgenerated("gen_random_uuid()"))
  isUsed Boolean @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userCardId String
  UserCard   UserCard @relation(fields: [userCardId], references: [id], onDelete: Cascade)

  bonusId  String
  Bonus    Bonus      @relation(fields: [bonusId], references: [id], onDelete: Cascade)
  Purchase Purchase[]
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  message String
  isRead  Boolean

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Currency {
  id         String @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  priceInUSD Float
}

model Purchase {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())

  userBonusId String
  UserBonus   UserBonus @relation(fields: [userBonusId], references: [id], onDelete: Cascade)
}
