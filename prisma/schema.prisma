// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  password       String
  nickname       String
  role           ROLES     @default(USER)
  profilePicture String?
  dateOfBirth    DateTime?
  location       String?
  createdAt      DateTime  @default(now())
  balance        Float     @default(0)
  visitCount     Int       @default(0)
  email          String?   @unique

  userTierId String
  Tier       UserTier @relation(references: [id], fields: [userTierId])

  UserCard     UserCard[]
  UserBonus    UserBonus[]
  Notification Notification[]
  Tap          Tap[]
  Transaction  Transaction[]
}

model Employee {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  password  String
  firstname String
  lastname  String
  role      ROLES
  createdAt DateTime @default(now())

  email                 String  @unique
  emailVerificationCode String?

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model EmailOtp {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  email            String
  verificationCode String?
  isUsed           Boolean @default(false)
  createdAt        DateTime @default(now())
}

model UserTier {
  id               String @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  requiredNo       Int
  rewardMultiplier Float

  nextTierId String?
  nextTier   UserTier? @relation("tierHierarchy", references: [id], fields: [nextTierId])

  precedingTiers UserTier[] @relation("tierHierarchy")
  User           User[]
}

model Device {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  pushToken String   @unique
  createdAt DateTime @default(now())
}

model Restaurant {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime @default(now())
  name          String
  description   String
  location      String
  latitude      Float
  longitude     Float
  logo          String?
  balance       Float    @default(0)
  rewardAmount  Float    @default(1)
  perkOccurence Int      @default(3)

  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id])

  Card        Card[]
  Timetable   Timetable[]
  Employee    Employee[]
  Transaction Transaction[]
}

model Category {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  createdAt  DateTime     @default(now())
  Restaurant Restaurant[]
}

model Timetable {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  dayNoOfTheWeek Int
  opensAt        String?
  closesAt       String?
  isOffDay       Boolean  @default(false)
  createdAt      DateTime @default(now())

  restaurantId String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Card {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  nftUrl      String
  nftImageUrl String?
  instruction String
  benefits    String

  // tier          TIER
  // totalSupply   Int
  // currentSupply Int

  // mintedAt    DateTime?
  // expiryInfo  String?
  // artistInfo  String?

  restaurantId String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  Bonus    Bonus[]
  UserCard UserCard[]
}

model UserCard {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  visitCount Int      @default(0)
  balance    Float    @default(0)
  ownedAt    DateTime @default(now())

  cardId String
  Card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Tap       Tap[]
  UserBonus UserBonus[]
}

model Tap {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  amount   Float
  tappedAt DateTime @default(now())

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userCardId String
  UserCard   UserCard @relation(fields: [userCardId], references: [id], onDelete: Cascade)
}

model Bonus {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  totalSupply   Int
  currentSupply Int      @default(0)
  createdAt     DateTime @default(now())

  price   Float?
  visitNo Int?
  type    BONUS_TYPE

  cardId String?

  Card      Card?       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  UserBonus UserBonus[]
}

model UserBonus {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userCardId String
  UserCard   UserCard @relation(fields: [userCardId], references: [id], onDelete: Cascade)

  bonusId  String
  Bonus    Bonus      @relation(fields: [bonusId], references: [id], onDelete: Cascade)
  Purchase Purchase[]
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  message   String
  isRead    Boolean
  createdAt DateTime @default(now())

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  ticker    String
  price     Float     @default(0)
  updatedAt DateTime? @default(now())
}

model Purchase {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())

  userBonusId String
  UserBonus   UserBonus @relation(fields: [userBonusId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  txid      String
  amount    Float
  type      TRANSACTION_TYPE
  createdAt DateTime         @default(now())

  restaurantId String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ROLES {
  SUPER_ADMIN
  RESTAURANT_OWNER
  RESTAURANT_WAITER
  USER
}

enum BONUS_TYPE {
  SINGLE
  RECURRING
  REDEEMABLE
}

enum TRANSACTION_TYPE {
  WITHDRAW
  DEPOSIT
}
