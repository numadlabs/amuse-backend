generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  password       String?
  nickname       String
  role           ROLES    @default(USER)
  profilePicture String?
  birthYear      Int?
  birthMonth     Int?
  createdAt      DateTime @default(now())
  balance        Float    @default(0)
  visitCount     Int      @default(0)
  email          String   @unique

  userTierId   String?
  countryId    String?
  Country      Country?       @relation(fields: [countryId], references: [id], onDelete: SetNull)
  Notification Notification[]
  Tap          Tap[]
  Transaction  Transaction[]
  Tier         UserTier?      @relation(fields: [userTierId], references: [id], onDelete: SetNull)
  UserBonus    UserBonus[]
  UserCard     UserCard[]
  Device       Device[]
  BugReport    BugReport[]
  Order        Order[]

  @@index([email])
}

model Employee {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  passwordUpdateAt DateTime  @default(now())
  password         String
  fullname         String    @default("Employee")
  role             ROLES
  createdAt        DateTime  @default(now())
  email            String
  isOnboarded      Boolean   @default(false)
  isActive         Boolean   @default(true)
  deletedAt        DateTime?

  restaurantId String?
  Restaurant   Restaurant?    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  UserBonus    UserBonus[]
  Notification Notification[]
  AuditTrail   AuditTrail[]
  Tap          Tap[]
  Order        Order[]

  @@index([email])
}

model EmailOtp {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  email            String
  verificationCode String
  isUsed           Boolean   @default(false)
  createdAt        DateTime  @default(now())
  userAt           DateTime?

  @@index([email])
}

model UserTier {
  id               String  @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  requiredNo       Int
  rewardMultiplier Float
  nextTierId       String?

  User           User[]
  nextTier       UserTier?  @relation("tierHierarchy", fields: [nextTierId], references: [id], onDelete: Cascade)
  precedingTiers UserTier[] @relation("tierHierarchy")
}

model Device {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  pushToken String   @unique
  createdAt DateTime @default(now())

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pushToken])
}

model Restaurant {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime @default(now())
  name          String
  description   String
  location      String
  googleMapsUrl String?
  latitude      Float
  longitude     Float
  logo          String?
  balance       Float    @default(0)
  rewardAmount  Float    @default(1)
  perkOccurence Int      @default(3)

  categoryId  String?
  Card        Card[]
  Employee    Employee[]
  Category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  Timetable   Timetable[]
  Transaction Transaction[]
  Product    Product[]
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  createdAt DateTime @default(now())

  Restaurant Restaurant[]
}

model Timetable {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  dayNoOfTheWeek Int
  opensAt        String?
  closesAt       String?
  isOffDay       Boolean  @default(false)
  createdAt      DateTime @default(now())

  restaurantId String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Card {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime @default(now())
  nftUrl       String
  nftImageUrl  String?
  instruction  String
  benefits     String
  restaurantId String

  Bonus      Bonus[]
  Restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  UserCard   UserCard[]
}

model UserCard {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  visitCount Int      @default(0)
  balance    Float    @default(0)
  ownedAt    DateTime @default(now())

  cardId    String
  userId    String
  Tap       Tap[]
  UserBonus UserBonus[]
  Card      Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([cardId, userId])
}

model Tap {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  amount   Float
  tappedAt DateTime @default(now())

  userId     String
  userCardId String
  employeeId String?

  UserCard   UserCard  @relation(fields: [userCardId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  RedeemedBy Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
}

model Bonus {
  id            String     @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  totalSupply   Int
  currentSupply Int        @default(0)
  createdAt     DateTime   @default(now())
  price         Float?
  visitNo       Int?
  type          BONUS_TYPE

  cardId    String
  Card      Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  UserBonus UserBonus[]
}

model UserBonus {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  userId     String
  userCardId String
  bonusId    String
  waiterId   String?
  Bonus      Bonus     @relation(fields: [bonusId], references: [id], onDelete: Cascade)
  UserCard   UserCard  @relation(fields: [userCardId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Employee   Employee? @relation(fields: [waiterId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String            @id @default(dbgenerated("gen_random_uuid()"))
  message   String
  isRead    Boolean           @default(false)
  type      NOTIFICATION_TYPE @default(REWARD)
  createdAt DateTime          @default(now())

  userId     String?
  employeeId String?
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  ticker    String    @unique
  price     Float     @default(0)
  updatedAt DateTime? @default(now())

  @@index([ticker])
}

model Transaction {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  txid      String
  amount    Float
  type      TRANSACTION_TYPE
  createdAt DateTime         @default(now())

  restaurantId String?
  userId       String?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  id          String @id @default(dbgenerated("gen_random_uuid()"))
  name        String @unique
  alpha3      String @unique
  countryCode String @unique
  User        User[]

  @@index([name, alpha3, countryCode])
}

model BugReport {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  deviceModel String
  appVersion  String
  osVersion   String
  reason      String
  description String?
  createdAt   DateTime @default(now())

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditTrail {
  id        String                 @id @default(dbgenerated("gen_random_uuid()"))
  tableName AUDIT_TRAIL_TABLES?
  operation AUDIT_TRAIL_OPERATIONS
  data      Json?
  createdAt DateTime               @default(now())

  updatedEmployeeId String?
  updatedBy         Employee? @relation(fields: [updatedEmployeeId], references: [id], onDelete: SetNull)
}

//Added Models for restaurant menu and payment


model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String
  price       Float
  imageUrl    String?
  productCategoryId  String?
  status  PRODUCT_STATUS @default(AVAILABLE)
  createdAt   DateTime @default(now())

  restaurantId String

  Restaurant  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  Category ProductCategory? @relation(fields: [productCategoryId], references: [id], onDelete: SetNull)

  OrderItem OrderItem[]
}

model ProductCategory {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String @unique
  createdAt   DateTime @default(now())

  Product      Product[]
}

model Order {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  status      ORDER_STATUS @default(PENDING)
  subtotal   Float @default(0)
  tax       Float?
  serviceCharge Float?
  discount    Float?
  total      Float @default(0)
  notes      String?
  tableNumber Int?
  createdAt   DateTime @default(now())

  userId String
  employeeId String?
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Employee Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  OrderItem OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  quantity    Int
  price       Float
  subtotal   Float
  createdAt   DateTime @default(now())

  productId String
  orderId String?
  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNo         String          @unique
  status            PAYMENT_STATUS   @default(REQUESTED)
  orderId           String
  errorDesc         String?
  provider          PAYMENT_METHOD @default(QPAY)
  totalAmount       Float
  providerInvoiceNo String?
  rewardReceived    Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())

  order  Order  @relation(fields: [orderId], references: [id])
}

model PaymentLog {
  id                    String @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNo             String
  success               Int?
  errorCode             String?
  errorDesc             String?
  cardNumber            String?
  providerResponseCode  String?
  providerResponseDesc  String?

  @@map("PaymentLog")
}

enum ORDER_STATUS {
  PENDING
  SERVED
  CANCELLED
}

enum PAYMENT_STATUS {
  REQUESTED
  APPROVED
  DECLINED
}

enum PAYMENT_METHOD {
  QPAY
  CARD
  METAMASK
}

enum EBARIMT_RECEIVER_TYPE {
  CITIZEN
  ORGINIZATION
}

enum PRODUCT_STATUS {
  SOLD_OUT
  AVAILABLE
  INCOMING
}

enum PRODUCT_SIZE {
  SMALL
  MEDIUM
  LARGE
}

enum ROLES {
  SUPER_ADMIN
  RESTAURANT_OWNER
  RESTAURANT_MANAGER
  RESTAURANT_WAITER
  USER
}

enum BONUS_TYPE {
  SINGLE
  RECURRING
  REDEEMABLE
}

enum TRANSACTION_TYPE {
  WITHDRAW
  DEPOSIT
  PURCHASE
  REWARD
}

enum NOTIFICATION_TYPE {
  TAP
  BONUS
  REWARD
  CARD
}

enum AUDIT_TRAIL_TABLES {
  RESTAURANT
  CARD
  BONUS
  CATEGORY
  TIMETABLE
  EMPLOYEE
}

enum AUDIT_TRAIL_OPERATIONS {
  INSERT
  UPDATE
  DELETE
  PUSH_NOTIFICATION
}
